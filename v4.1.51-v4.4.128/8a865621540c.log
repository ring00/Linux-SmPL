--- /home/oslab/Desktop/common/net/netfilter/xt_qtaguid.c
+++ /tmp/cocci-output-18148-7d14a7-xt_qtaguid.c
@@ -773,7 +773,7 @@ static int iface_stat_fmt_proc_show(stru
 	} else {
 		pp_iface_stat_line(m, iface_entry);
 	}
-	return xt_compat_check_entry_offsets(e, e->target_offset,
+	return xt_compat_check_entry_offsets(e, e->elems, e->target_offset,
 					     e->next_offset);
 }
 
@@ -1492,7 +1492,7 @@ static int proc_iface_stat_fmt_open(stru
 		return -ENOMEM;
 
 	s->fmt = (uintptr_t)PDE_DATA(inode);
-	return xt_compat_check_entry_offsets(e, e->target_offset,
+	return xt_compat_check_entry_offsets(e, e->elems, e->target_offset,
 					     e->next_offset);
 }
 
@@ -1558,7 +1558,7 @@ static int __init iface_stat_init(struct
 		       "failed to register ipv6 dev event handler\n");
 		goto err_unreg_ip4_addr;
 	}
-	return xt_compat_check_entry_offsets(e, e->target_offset,
+	return xt_compat_check_entry_offsets(e, e->elems, e->target_offset,
 					     e->next_offset);
 
 err_unreg_ip4_addr:
@@ -1986,7 +1986,7 @@ static int qtaguid_ctrl_proc_show(struct
 		prdebug_full_state_locked(0, "proc ctrl");
 	}
 
-	return xt_compat_check_entry_offsets(e, e->target_offset,
+	return xt_compat_check_entry_offsets(e, e->elems, e->target_offset,
 					     e->next_offset);
 }
 
@@ -2355,7 +2355,7 @@ static int ctrl_cmd_tag(const char *inpu
 	CT_DEBUG("qtaguid: ctrl_tag(%s): done st@%p ...->f_count=%ld\n",
 		 input, sock_tag_entry,
 		 atomic_long_read(&el_socket->file->f_count));
-	return xt_compat_check_entry_offsets(e, e->target_offset,
+	return xt_compat_check_entry_offsets(e, e->elems, e->target_offset,
 					     e->next_offset);
 
 err_tag_unref_put:
@@ -2454,7 +2454,7 @@ static int ctrl_cmd_untag(const char *in
 	kfree(sock_tag_entry);
 	atomic64_inc(&qtu_events.sockets_untagged);
 
-	return xt_compat_check_entry_offsets(e, e->target_offset,
+	return xt_compat_check_entry_offsets(e, e->elems, e->target_offset,
 					     e->next_offset);
 
 err_put:
@@ -2565,7 +2565,8 @@ static int pp_stats_line(struct seq_file
 			 get_atag_from_tag(tag), stat_uid,
 			 current->pid, current->tgid, from_kuid(&init_user_ns, current_fsuid()),
 			 from_kgid(&init_user_ns,xt_qtaguid_stats_file->gid));
-		return xt_compat_check_entry_offsets(e, e->target_offset,
+		return xt_compat_check_entry_offsets(e, e->elems,
+						     e->target_offset,
 						     e->next_offset);
 	}
 	ppi->item_index++;
@@ -2751,7 +2752,7 @@ static int qtaguid_stats_proc_show(struc
 	else
 		pp_sets(m, ts_entry);
 
-	return xt_compat_check_entry_offsets(e, e->target_offset,
+	return xt_compat_check_entry_offsets(e, e->elems, e->target_offset,
 					     e->next_offset);
 }
 
@@ -2765,7 +2766,8 @@ static int qtudev_open(struct inode *ino
 	bool utd_entry_found;
 
 	if (unlikely(qtu_proc_handling_passive))
-		return xt_compat_check_entry_offsets(e, e->target_offset,
+		return xt_compat_check_entry_offsets(e, e->elems,
+						     e->target_offset,
 						     e->next_offset);
 
 	DR_DEBUG("qtaguid: qtudev_open(): pid=%u tgid=%u uid=%u\n",
@@ -2812,7 +2814,7 @@ static int qtudev_open(struct inode *ino
 	DR_DEBUG("qtaguid: tracking data for uid=%u in pqd=%p\n",
 		 from_kuid(&init_user_ns, current_fsuid()), new_pqd_entry);
 	file->private_data = new_pqd_entry;
-	return xt_compat_check_entry_offsets(e, e->target_offset,
+	return xt_compat_check_entry_offsets(e, e->elems, e->target_offset,
 					     e->next_offset);
 
 err_unlock_free_utd:
@@ -2835,7 +2837,8 @@ static int qtudev_release(struct inode *
 	struct tag_ref *tr;
 
 	if (unlikely(qtu_proc_handling_passive))
-		return xt_compat_check_entry_offsets(e, e->target_offset,
+		return xt_compat_check_entry_offsets(e, e->elems,
+						     e->target_offset,
 						     e->next_offset);
 
 	/*
@@ -2905,7 +2908,7 @@ static int qtudev_release(struct inode *
 	prdebug_full_state_locked(0, "%s(): pid=%u tgid=%u", __func__,
 			   current->pid, current->tgid);
 	spin_unlock_bh(&sock_tag_list_lock);
-	return xt_compat_check_entry_offsets(e, e->target_offset,
+	return xt_compat_check_entry_offsets(e, e->elems, e->target_offset,
 					     e->next_offset);
 }
 
@@ -3000,7 +3003,7 @@ static int __init qtaguid_proc_register(
 	 * TODO: add support counter hacking
 	 * xt_qtaguid_stats_file->write_proc = qtaguid_stats_proc_write;
 	 */
-	return xt_compat_check_entry_offsets(e, e->target_offset,
+	return xt_compat_check_entry_offsets(e, e->elems, e->target_offset,
 					     e->next_offset);
 
 no_stats_entry:
@@ -3031,7 +3034,7 @@ static int __init qtaguid_mt_init(void)
 	    || xt_register_match(&qtaguid_mt_reg)
 	    || misc_register(&qtu_device))
 		return -1;
-	return xt_compat_check_entry_offsets(e, e->target_offset,
+	return xt_compat_check_entry_offsets(e, e->elems, e->target_offset,
 					     e->next_offset);
 }
 
