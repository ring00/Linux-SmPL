BUILD:
[33mbase commit: e36cb0b89ce2^1
[0m[33mtarget commit: e36cb0b89ce2
[0m[33mchecking out base commit... [0m[33mok (1s)
[0m[33mformatting diff... [0m[33mok (1s)
[0m34 source file(s) touched in the old version
`-- arch/s390/hypfs/inode.c
`-- fs/9p/vfs_inode.c
`-- fs/autofs4/expire.c
`-- fs/autofs4/root.c
`-- fs/btrfs/ioctl.c
`-- fs/cachefiles/daemon.c
`-- fs/cachefiles/namei.c
`-- fs/ceph/dir.c
`-- fs/ceph/file.c
`-- fs/coda/dir.c
`-- fs/debugfs/inode.c
`-- fs/ecryptfs/file.c
`-- fs/ecryptfs/inode.c
`-- fs/exportfs/expfs.c
`-- fs/fuse/dir.c
`-- fs/gfs2/dir.c
`-- fs/hfsplus/dir.c
`-- fs/hppfs/hppfs.c
`-- fs/jffs2/dir.c
`-- fs/jffs2/super.c
`-- fs/libfs.c
`-- fs/namei.c
`-- fs/namespace.c
`-- fs/nfsd/nfs4recover.c
`-- fs/nfsd/nfsfh.c
`-- fs/nfsd/vfs.c
`-- fs/notify/fanotify/fanotify.c
`-- fs/overlayfs/dir.c
`-- fs/posix_acl.c
`-- fs/reiserfs/xattr.c
`-- fs/xfs/xfs_ioctl.c
`-- mm/shmem.c
`-- security/inode.c
`-- security/selinux/hooks.c
34 source file(s) touched in the new version
`-- arch/s390/hypfs/inode.c
`-- fs/9p/vfs_inode.c
`-- fs/autofs4/expire.c
`-- fs/autofs4/root.c
`-- fs/btrfs/ioctl.c
`-- fs/cachefiles/daemon.c
`-- fs/cachefiles/namei.c
`-- fs/ceph/dir.c
`-- fs/ceph/file.c
`-- fs/coda/dir.c
`-- fs/debugfs/inode.c
`-- fs/ecryptfs/file.c
`-- fs/ecryptfs/inode.c
`-- fs/exportfs/expfs.c
`-- fs/fuse/dir.c
`-- fs/gfs2/dir.c
`-- fs/hfsplus/dir.c
`-- fs/hppfs/hppfs.c
`-- fs/jffs2/dir.c
`-- fs/jffs2/super.c
`-- fs/libfs.c
`-- fs/namei.c
`-- fs/namespace.c
`-- fs/nfsd/nfs4recover.c
`-- fs/nfsd/nfsfh.c
`-- fs/nfsd/vfs.c
`-- fs/notify/fanotify/fanotify.c
`-- fs/overlayfs/dir.c
`-- fs/posix_acl.c
`-- fs/reiserfs/xattr.c
`-- fs/xfs/xfs_ioctl.c
`-- mm/shmem.c
`-- security/inode.c
`-- security/selinux/hooks.c
[33mcompile base commit... [0m[33mok (61s)
[0m[33mapply [0m[33me36cb0b89ce2... [0m[33mok (61s)
[0m[33mcompile target commit... [0m[33mok (111s)
[0mPREPARE:
[33mcollect AST for functions: nfs4_reset_recoverydir@fs_nfsd_nfs4recover.c,ovl_rename2@fs_overlayfs_dir.c,shmem_exchange@mm_shmem.c,cachefiles_walk_to_object@fs_cachefiles_namei.c,ovl_cleanup@fs_overlayfs_dir.c,should_expire@fs_autofs4_expire.c,do_add_mount@fs_namespace.c,jffs2_rename@fs_jffs2_dir.c,cachefiles_bury_object@fs_cachefiles_namei.c,exportfs_decode_fh@fs_exportfs_expfs.c,get_inode@fs_hppfs_hppfs.c,cachefiles_daemon_cull@fs_cachefiles_daemon.c,ceph_unlink@fs_ceph_dir.c,atomic_open@fs_namei.c,simple_rename@fs_libfs.c,fanotify_should_send_event@fs_notify_fanotify_fanotify.c,debugfs_rename@fs_debugfs_inode.c,cachefiles_daemon_inuse@fs_cachefiles_daemon.c,ecryptfs_setattr@fs_ecryptfs_inode.c,v9fs_vfs_setattr@fs_9p_vfs_inode.c,graft_tree@fs_namespace.c,nfsd_set_fh_dentry@fs_nfsd_nfsfh.c,autofs4_d_automount@fs_autofs4_root.c,delete_one_xattr@fs_reiserfs_xattr.c,autofs4_d_manage@fs_autofs4_root.c,ecryptfs_open@fs_ecryptfs_file.c,nfsd4_client_tracking_init@fs_nfsd_nfs4recover.c,posix_acl_xattr_get@fs_posix_acl.c,hfsplus_rename@fs_hfsplus_dir.c,do_move_mount@fs_namespace.c,btrfs_may_delete@fs_btrfs_ioctl.c,securityfs_remove@security_inode.c,nfsd_link@fs_nfsd_vfs.c,may_rename@security_selinux_hooks.c,reiserfs_for_each_xattr@fs_reiserfs_xattr.c,coda_rename@fs_coda_dir.c,cachefiles_get_directory@fs_cachefiles_namei.c,xfs_readlink_by_handle@fs_xfs_xfs_ioctl.c,posix_acl_xattr_list@fs_posix_acl.c,jffs2_get_parent@fs_jffs2_super.c,jffs2_link@fs_jffs2_dir.c,do_nfsd_create@fs_nfsd_vfs.c,fuse_reverse_inval_entry@fs_fuse_dir.c,_fh_update_old@fs_nfsd_nfsfh.c,check_pseudo_root@fs_nfsd_nfsfh.c,gfs2_dir_del@fs_gfs2_dir.c,ceph_atomic_open@fs_ceph_file.c,nfsd_access@fs_nfsd_vfs.c
[0m[33mTransforming and linking bitcode files...
[0m[33m12s
[0mANALYZE:
COCCIGEN:
//# pattern-2, witnesses: 38
@@
expression E0;
@@
- S_ISDIR(E0->d_inode->i_mode)
+ d_is_dir(E0)
//# pattern-5, witnesses: 7
@@
expression E0;
@@
- S_ISREG(E0->d_inode->i_mode)
+ d_is_reg(E0)
//# pattern-4, witnesses: 5
@r0@
identifier i, fn;
@@
struct inode_operations i = {
    .rename = fn,
};
@@
statement S0;
identifier new_dentry;
identifier new_dir;
identifier old_dentry;
identifier old_dir;
identifier r0.fn;
@@
 int fn(struct inode * old_dir, struct dentry * old_dentry, struct inode * new_dir, struct dentry * new_dentry)
 {
     <...
- if (S_ISDIR(new_dentry->d_inode->i_mode)) { S0 }
+ if (d_is_dir(new_dentry)) { S0 }
     ...>
 }
//# pattern-8, witnesses: 5
@@
expression E0;
@@
- S_ISLNK(E0->d_inode->i_mode)
+ d_is_symlink(E0)
//# pattern-3, witnesses: 2
@@
expression ME0;
expression ME1;
@@
- S_ISDIR(ME0->d_inode->i_mode) != S_ISDIR(ME1->d_inode->i_mode)
+ d_is_dir(ME0) != d_is_dir(ME1)
//# pattern-7, witnesses: 2
@@
expression E0;
@@
- E0 && S_ISLNK(dentry->d_inode->i_mode)
+ E0 && d_is_symlink(dentry)
//# pattern-10, witnesses: 2
@@
identifier PV0;
@@
- !S_ISDIR
+ !d_is_dir(PV0)
